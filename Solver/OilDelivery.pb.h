// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OilDelivery.proto

#ifndef PROTOBUF_INCLUDED_OilDelivery_2eproto
#define PROTOBUF_INCLUDED_OilDelivery_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_OilDelivery_2eproto 

namespace protobuf_OilDelivery_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[11];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_OilDelivery_2eproto
namespace pb {
class OilDelivery;
class OilDeliveryDefaultTypeInternal;
extern OilDeliveryDefaultTypeInternal _OilDelivery_default_instance_;
class OilDelivery_Cabin;
class OilDelivery_CabinDefaultTypeInternal;
extern OilDelivery_CabinDefaultTypeInternal _OilDelivery_Cabin_default_instance_;
class OilDelivery_CabinDelivery;
class OilDelivery_CabinDeliveryDefaultTypeInternal;
extern OilDelivery_CabinDeliveryDefaultTypeInternal _OilDelivery_CabinDelivery_default_instance_;
class OilDelivery_GasStation;
class OilDelivery_GasStationDefaultTypeInternal;
extern OilDelivery_GasStationDefaultTypeInternal _OilDelivery_GasStation_default_instance_;
class OilDelivery_GasStation_DemandValue;
class OilDelivery_GasStation_DemandValueDefaultTypeInternal;
extern OilDelivery_GasStation_DemandValueDefaultTypeInternal _OilDelivery_GasStation_DemandValue_default_instance_;
class OilDelivery_Input;
class OilDelivery_InputDefaultTypeInternal;
extern OilDelivery_InputDefaultTypeInternal _OilDelivery_Input_default_instance_;
class OilDelivery_Output;
class OilDelivery_OutputDefaultTypeInternal;
extern OilDelivery_OutputDefaultTypeInternal _OilDelivery_Output_default_instance_;
class OilDelivery_Output_Delivery;
class OilDelivery_Output_DeliveryDefaultTypeInternal;
extern OilDelivery_Output_DeliveryDefaultTypeInternal _OilDelivery_Output_Delivery_default_instance_;
class OilDelivery_Submission;
class OilDelivery_SubmissionDefaultTypeInternal;
extern OilDelivery_SubmissionDefaultTypeInternal _OilDelivery_Submission_default_instance_;
class OilDelivery_Vehicle;
class OilDelivery_VehicleDefaultTypeInternal;
extern OilDelivery_VehicleDefaultTypeInternal _OilDelivery_Vehicle_default_instance_;
class OilDelivery_VehicleDelivery;
class OilDelivery_VehicleDeliveryDefaultTypeInternal;
extern OilDelivery_VehicleDeliveryDefaultTypeInternal _OilDelivery_VehicleDelivery_default_instance_;
}  // namespace pb
namespace google {
namespace protobuf {
template<> ::pb::OilDelivery* Arena::CreateMaybeMessage<::pb::OilDelivery>(Arena*);
template<> ::pb::OilDelivery_Cabin* Arena::CreateMaybeMessage<::pb::OilDelivery_Cabin>(Arena*);
template<> ::pb::OilDelivery_CabinDelivery* Arena::CreateMaybeMessage<::pb::OilDelivery_CabinDelivery>(Arena*);
template<> ::pb::OilDelivery_GasStation* Arena::CreateMaybeMessage<::pb::OilDelivery_GasStation>(Arena*);
template<> ::pb::OilDelivery_GasStation_DemandValue* Arena::CreateMaybeMessage<::pb::OilDelivery_GasStation_DemandValue>(Arena*);
template<> ::pb::OilDelivery_Input* Arena::CreateMaybeMessage<::pb::OilDelivery_Input>(Arena*);
template<> ::pb::OilDelivery_Output* Arena::CreateMaybeMessage<::pb::OilDelivery_Output>(Arena*);
template<> ::pb::OilDelivery_Output_Delivery* Arena::CreateMaybeMessage<::pb::OilDelivery_Output_Delivery>(Arena*);
template<> ::pb::OilDelivery_Submission* Arena::CreateMaybeMessage<::pb::OilDelivery_Submission>(Arena*);
template<> ::pb::OilDelivery_Vehicle* Arena::CreateMaybeMessage<::pb::OilDelivery_Vehicle>(Arena*);
template<> ::pb::OilDelivery_VehicleDelivery* Arena::CreateMaybeMessage<::pb::OilDelivery_VehicleDelivery>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace pb {

// ===================================================================

class OilDelivery_Input : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.OilDelivery.Input) */ {
 public:
  OilDelivery_Input();
  virtual ~OilDelivery_Input();

  OilDelivery_Input(const OilDelivery_Input& from);

  inline OilDelivery_Input& operator=(const OilDelivery_Input& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OilDelivery_Input(OilDelivery_Input&& from) noexcept
    : OilDelivery_Input() {
    *this = ::std::move(from);
  }

  inline OilDelivery_Input& operator=(OilDelivery_Input&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OilDelivery_Input& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OilDelivery_Input* internal_default_instance() {
    return reinterpret_cast<const OilDelivery_Input*>(
               &_OilDelivery_Input_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(OilDelivery_Input* other);
  friend void swap(OilDelivery_Input& a, OilDelivery_Input& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OilDelivery_Input* New() const final {
    return CreateMaybeMessage<OilDelivery_Input>(NULL);
  }

  OilDelivery_Input* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OilDelivery_Input>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OilDelivery_Input& from);
  void MergeFrom(const OilDelivery_Input& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OilDelivery_Input* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.OilDelivery.GasStation gasStations = 1;
  int gasstations_size() const;
  void clear_gasstations();
  static const int kGasStationsFieldNumber = 1;
  ::pb::OilDelivery_GasStation* mutable_gasstations(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::OilDelivery_GasStation >*
      mutable_gasstations();
  const ::pb::OilDelivery_GasStation& gasstations(int index) const;
  ::pb::OilDelivery_GasStation* add_gasstations();
  const ::google::protobuf::RepeatedPtrField< ::pb::OilDelivery_GasStation >&
      gasstations() const;

  // repeated .pb.OilDelivery.Vehicle vehicles = 2;
  int vehicles_size() const;
  void clear_vehicles();
  static const int kVehiclesFieldNumber = 2;
  ::pb::OilDelivery_Vehicle* mutable_vehicles(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::OilDelivery_Vehicle >*
      mutable_vehicles();
  const ::pb::OilDelivery_Vehicle& vehicles(int index) const;
  ::pb::OilDelivery_Vehicle* add_vehicles();
  const ::google::protobuf::RepeatedPtrField< ::pb::OilDelivery_Vehicle >&
      vehicles() const;

  // @@protoc_insertion_point(class_scope:pb.OilDelivery.Input)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::OilDelivery_GasStation > gasstations_;
  ::google::protobuf::RepeatedPtrField< ::pb::OilDelivery_Vehicle > vehicles_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_OilDelivery_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OilDelivery_Output_Delivery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.OilDelivery.Output.Delivery) */ {
 public:
  OilDelivery_Output_Delivery();
  virtual ~OilDelivery_Output_Delivery();

  OilDelivery_Output_Delivery(const OilDelivery_Output_Delivery& from);

  inline OilDelivery_Output_Delivery& operator=(const OilDelivery_Output_Delivery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OilDelivery_Output_Delivery(OilDelivery_Output_Delivery&& from) noexcept
    : OilDelivery_Output_Delivery() {
    *this = ::std::move(from);
  }

  inline OilDelivery_Output_Delivery& operator=(OilDelivery_Output_Delivery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OilDelivery_Output_Delivery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OilDelivery_Output_Delivery* internal_default_instance() {
    return reinterpret_cast<const OilDelivery_Output_Delivery*>(
               &_OilDelivery_Output_Delivery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(OilDelivery_Output_Delivery* other);
  friend void swap(OilDelivery_Output_Delivery& a, OilDelivery_Output_Delivery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OilDelivery_Output_Delivery* New() const final {
    return CreateMaybeMessage<OilDelivery_Output_Delivery>(NULL);
  }

  OilDelivery_Output_Delivery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OilDelivery_Output_Delivery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OilDelivery_Output_Delivery& from);
  void MergeFrom(const OilDelivery_Output_Delivery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OilDelivery_Output_Delivery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.OilDelivery.VehicleDelivery vehicleDeliveries = 1;
  int vehicledeliveries_size() const;
  void clear_vehicledeliveries();
  static const int kVehicleDeliveriesFieldNumber = 1;
  ::pb::OilDelivery_VehicleDelivery* mutable_vehicledeliveries(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::OilDelivery_VehicleDelivery >*
      mutable_vehicledeliveries();
  const ::pb::OilDelivery_VehicleDelivery& vehicledeliveries(int index) const;
  ::pb::OilDelivery_VehicleDelivery* add_vehicledeliveries();
  const ::google::protobuf::RepeatedPtrField< ::pb::OilDelivery_VehicleDelivery >&
      vehicledeliveries() const;

  // @@protoc_insertion_point(class_scope:pb.OilDelivery.Output.Delivery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::OilDelivery_VehicleDelivery > vehicledeliveries_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_OilDelivery_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OilDelivery_Output : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.OilDelivery.Output) */ {
 public:
  OilDelivery_Output();
  virtual ~OilDelivery_Output();

  OilDelivery_Output(const OilDelivery_Output& from);

  inline OilDelivery_Output& operator=(const OilDelivery_Output& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OilDelivery_Output(OilDelivery_Output&& from) noexcept
    : OilDelivery_Output() {
    *this = ::std::move(from);
  }

  inline OilDelivery_Output& operator=(OilDelivery_Output&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OilDelivery_Output& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OilDelivery_Output* internal_default_instance() {
    return reinterpret_cast<const OilDelivery_Output*>(
               &_OilDelivery_Output_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(OilDelivery_Output* other);
  friend void swap(OilDelivery_Output& a, OilDelivery_Output& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OilDelivery_Output* New() const final {
    return CreateMaybeMessage<OilDelivery_Output>(NULL);
  }

  OilDelivery_Output* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OilDelivery_Output>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OilDelivery_Output& from);
  void MergeFrom(const OilDelivery_Output& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OilDelivery_Output* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OilDelivery_Output_Delivery Delivery;

  // accessors -------------------------------------------------------

  // repeated .pb.OilDelivery.Output.Delivery deliveries = 1;
  int deliveries_size() const;
  void clear_deliveries();
  static const int kDeliveriesFieldNumber = 1;
  ::pb::OilDelivery_Output_Delivery* mutable_deliveries(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::OilDelivery_Output_Delivery >*
      mutable_deliveries();
  const ::pb::OilDelivery_Output_Delivery& deliveries(int index) const;
  ::pb::OilDelivery_Output_Delivery* add_deliveries();
  const ::google::protobuf::RepeatedPtrField< ::pb::OilDelivery_Output_Delivery >&
      deliveries() const;

  // @@protoc_insertion_point(class_scope:pb.OilDelivery.Output)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::OilDelivery_Output_Delivery > deliveries_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_OilDelivery_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OilDelivery_GasStation_DemandValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.OilDelivery.GasStation.DemandValue) */ {
 public:
  OilDelivery_GasStation_DemandValue();
  virtual ~OilDelivery_GasStation_DemandValue();

  OilDelivery_GasStation_DemandValue(const OilDelivery_GasStation_DemandValue& from);

  inline OilDelivery_GasStation_DemandValue& operator=(const OilDelivery_GasStation_DemandValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OilDelivery_GasStation_DemandValue(OilDelivery_GasStation_DemandValue&& from) noexcept
    : OilDelivery_GasStation_DemandValue() {
    *this = ::std::move(from);
  }

  inline OilDelivery_GasStation_DemandValue& operator=(OilDelivery_GasStation_DemandValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OilDelivery_GasStation_DemandValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OilDelivery_GasStation_DemandValue* internal_default_instance() {
    return reinterpret_cast<const OilDelivery_GasStation_DemandValue*>(
               &_OilDelivery_GasStation_DemandValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(OilDelivery_GasStation_DemandValue* other);
  friend void swap(OilDelivery_GasStation_DemandValue& a, OilDelivery_GasStation_DemandValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OilDelivery_GasStation_DemandValue* New() const final {
    return CreateMaybeMessage<OilDelivery_GasStation_DemandValue>(NULL);
  }

  OilDelivery_GasStation_DemandValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OilDelivery_GasStation_DemandValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OilDelivery_GasStation_DemandValue& from);
  void MergeFrom(const OilDelivery_GasStation_DemandValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OilDelivery_GasStation_DemandValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 demand = 1;
  void clear_demand();
  static const int kDemandFieldNumber = 1;
  ::google::protobuf::int32 demand() const;
  void set_demand(::google::protobuf::int32 value);

  // int32 value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.OilDelivery.GasStation.DemandValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 demand_;
  ::google::protobuf::int32 value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_OilDelivery_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OilDelivery_GasStation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.OilDelivery.GasStation) */ {
 public:
  OilDelivery_GasStation();
  virtual ~OilDelivery_GasStation();

  OilDelivery_GasStation(const OilDelivery_GasStation& from);

  inline OilDelivery_GasStation& operator=(const OilDelivery_GasStation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OilDelivery_GasStation(OilDelivery_GasStation&& from) noexcept
    : OilDelivery_GasStation() {
    *this = ::std::move(from);
  }

  inline OilDelivery_GasStation& operator=(OilDelivery_GasStation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OilDelivery_GasStation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OilDelivery_GasStation* internal_default_instance() {
    return reinterpret_cast<const OilDelivery_GasStation*>(
               &_OilDelivery_GasStation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(OilDelivery_GasStation* other);
  friend void swap(OilDelivery_GasStation& a, OilDelivery_GasStation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OilDelivery_GasStation* New() const final {
    return CreateMaybeMessage<OilDelivery_GasStation>(NULL);
  }

  OilDelivery_GasStation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OilDelivery_GasStation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OilDelivery_GasStation& from);
  void MergeFrom(const OilDelivery_GasStation& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OilDelivery_GasStation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OilDelivery_GasStation_DemandValue DemandValue;

  // accessors -------------------------------------------------------

  // repeated .pb.OilDelivery.GasStation.DemandValue demandValues = 2;
  int demandvalues_size() const;
  void clear_demandvalues();
  static const int kDemandValuesFieldNumber = 2;
  ::pb::OilDelivery_GasStation_DemandValue* mutable_demandvalues(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::OilDelivery_GasStation_DemandValue >*
      mutable_demandvalues();
  const ::pb::OilDelivery_GasStation_DemandValue& demandvalues(int index) const;
  ::pb::OilDelivery_GasStation_DemandValue* add_demandvalues();
  const ::google::protobuf::RepeatedPtrField< ::pb::OilDelivery_GasStation_DemandValue >&
      demandvalues() const;

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.OilDelivery.GasStation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::OilDelivery_GasStation_DemandValue > demandvalues_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_OilDelivery_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OilDelivery_Vehicle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.OilDelivery.Vehicle) */ {
 public:
  OilDelivery_Vehicle();
  virtual ~OilDelivery_Vehicle();

  OilDelivery_Vehicle(const OilDelivery_Vehicle& from);

  inline OilDelivery_Vehicle& operator=(const OilDelivery_Vehicle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OilDelivery_Vehicle(OilDelivery_Vehicle&& from) noexcept
    : OilDelivery_Vehicle() {
    *this = ::std::move(from);
  }

  inline OilDelivery_Vehicle& operator=(OilDelivery_Vehicle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OilDelivery_Vehicle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OilDelivery_Vehicle* internal_default_instance() {
    return reinterpret_cast<const OilDelivery_Vehicle*>(
               &_OilDelivery_Vehicle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(OilDelivery_Vehicle* other);
  friend void swap(OilDelivery_Vehicle& a, OilDelivery_Vehicle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OilDelivery_Vehicle* New() const final {
    return CreateMaybeMessage<OilDelivery_Vehicle>(NULL);
  }

  OilDelivery_Vehicle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OilDelivery_Vehicle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OilDelivery_Vehicle& from);
  void MergeFrom(const OilDelivery_Vehicle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OilDelivery_Vehicle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.OilDelivery.Cabin cabins = 2;
  int cabins_size() const;
  void clear_cabins();
  static const int kCabinsFieldNumber = 2;
  ::pb::OilDelivery_Cabin* mutable_cabins(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::OilDelivery_Cabin >*
      mutable_cabins();
  const ::pb::OilDelivery_Cabin& cabins(int index) const;
  ::pb::OilDelivery_Cabin* add_cabins();
  const ::google::protobuf::RepeatedPtrField< ::pb::OilDelivery_Cabin >&
      cabins() const;

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.OilDelivery.Vehicle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::OilDelivery_Cabin > cabins_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_OilDelivery_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OilDelivery_Cabin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.OilDelivery.Cabin) */ {
 public:
  OilDelivery_Cabin();
  virtual ~OilDelivery_Cabin();

  OilDelivery_Cabin(const OilDelivery_Cabin& from);

  inline OilDelivery_Cabin& operator=(const OilDelivery_Cabin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OilDelivery_Cabin(OilDelivery_Cabin&& from) noexcept
    : OilDelivery_Cabin() {
    *this = ::std::move(from);
  }

  inline OilDelivery_Cabin& operator=(OilDelivery_Cabin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OilDelivery_Cabin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OilDelivery_Cabin* internal_default_instance() {
    return reinterpret_cast<const OilDelivery_Cabin*>(
               &_OilDelivery_Cabin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(OilDelivery_Cabin* other);
  friend void swap(OilDelivery_Cabin& a, OilDelivery_Cabin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OilDelivery_Cabin* New() const final {
    return CreateMaybeMessage<OilDelivery_Cabin>(NULL);
  }

  OilDelivery_Cabin* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OilDelivery_Cabin>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OilDelivery_Cabin& from);
  void MergeFrom(const OilDelivery_Cabin& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OilDelivery_Cabin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 volume = 2;
  void clear_volume();
  static const int kVolumeFieldNumber = 2;
  ::google::protobuf::int32 volume() const;
  void set_volume(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.OilDelivery.Cabin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 volume_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_OilDelivery_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OilDelivery_VehicleDelivery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.OilDelivery.VehicleDelivery) */ {
 public:
  OilDelivery_VehicleDelivery();
  virtual ~OilDelivery_VehicleDelivery();

  OilDelivery_VehicleDelivery(const OilDelivery_VehicleDelivery& from);

  inline OilDelivery_VehicleDelivery& operator=(const OilDelivery_VehicleDelivery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OilDelivery_VehicleDelivery(OilDelivery_VehicleDelivery&& from) noexcept
    : OilDelivery_VehicleDelivery() {
    *this = ::std::move(from);
  }

  inline OilDelivery_VehicleDelivery& operator=(OilDelivery_VehicleDelivery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OilDelivery_VehicleDelivery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OilDelivery_VehicleDelivery* internal_default_instance() {
    return reinterpret_cast<const OilDelivery_VehicleDelivery*>(
               &_OilDelivery_VehicleDelivery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(OilDelivery_VehicleDelivery* other);
  friend void swap(OilDelivery_VehicleDelivery& a, OilDelivery_VehicleDelivery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OilDelivery_VehicleDelivery* New() const final {
    return CreateMaybeMessage<OilDelivery_VehicleDelivery>(NULL);
  }

  OilDelivery_VehicleDelivery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OilDelivery_VehicleDelivery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OilDelivery_VehicleDelivery& from);
  void MergeFrom(const OilDelivery_VehicleDelivery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OilDelivery_VehicleDelivery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.OilDelivery.CabinDelivery cabinDeliveries = 2;
  int cabindeliveries_size() const;
  void clear_cabindeliveries();
  static const int kCabinDeliveriesFieldNumber = 2;
  ::pb::OilDelivery_CabinDelivery* mutable_cabindeliveries(int index);
  ::google::protobuf::RepeatedPtrField< ::pb::OilDelivery_CabinDelivery >*
      mutable_cabindeliveries();
  const ::pb::OilDelivery_CabinDelivery& cabindeliveries(int index) const;
  ::pb::OilDelivery_CabinDelivery* add_cabindeliveries();
  const ::google::protobuf::RepeatedPtrField< ::pb::OilDelivery_CabinDelivery >&
      cabindeliveries() const;

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.OilDelivery.VehicleDelivery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::pb::OilDelivery_CabinDelivery > cabindeliveries_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_OilDelivery_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OilDelivery_CabinDelivery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.OilDelivery.CabinDelivery) */ {
 public:
  OilDelivery_CabinDelivery();
  virtual ~OilDelivery_CabinDelivery();

  OilDelivery_CabinDelivery(const OilDelivery_CabinDelivery& from);

  inline OilDelivery_CabinDelivery& operator=(const OilDelivery_CabinDelivery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OilDelivery_CabinDelivery(OilDelivery_CabinDelivery&& from) noexcept
    : OilDelivery_CabinDelivery() {
    *this = ::std::move(from);
  }

  inline OilDelivery_CabinDelivery& operator=(OilDelivery_CabinDelivery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OilDelivery_CabinDelivery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OilDelivery_CabinDelivery* internal_default_instance() {
    return reinterpret_cast<const OilDelivery_CabinDelivery*>(
               &_OilDelivery_CabinDelivery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(OilDelivery_CabinDelivery* other);
  friend void swap(OilDelivery_CabinDelivery& a, OilDelivery_CabinDelivery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OilDelivery_CabinDelivery* New() const final {
    return CreateMaybeMessage<OilDelivery_CabinDelivery>(NULL);
  }

  OilDelivery_CabinDelivery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OilDelivery_CabinDelivery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OilDelivery_CabinDelivery& from);
  void MergeFrom(const OilDelivery_CabinDelivery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OilDelivery_CabinDelivery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 stationId = 2;
  void clear_stationid();
  static const int kStationIdFieldNumber = 2;
  ::google::protobuf::int32 stationid() const;
  void set_stationid(::google::protobuf::int32 value);

  // int32 quantity = 3;
  void clear_quantity();
  static const int kQuantityFieldNumber = 3;
  ::google::protobuf::int32 quantity() const;
  void set_quantity(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.OilDelivery.CabinDelivery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 stationid_;
  ::google::protobuf::int32 quantity_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_OilDelivery_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OilDelivery_Submission : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.OilDelivery.Submission) */ {
 public:
  OilDelivery_Submission();
  virtual ~OilDelivery_Submission();

  OilDelivery_Submission(const OilDelivery_Submission& from);

  inline OilDelivery_Submission& operator=(const OilDelivery_Submission& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OilDelivery_Submission(OilDelivery_Submission&& from) noexcept
    : OilDelivery_Submission() {
    *this = ::std::move(from);
  }

  inline OilDelivery_Submission& operator=(OilDelivery_Submission&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OilDelivery_Submission& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OilDelivery_Submission* internal_default_instance() {
    return reinterpret_cast<const OilDelivery_Submission*>(
               &_OilDelivery_Submission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(OilDelivery_Submission* other);
  friend void swap(OilDelivery_Submission& a, OilDelivery_Submission& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OilDelivery_Submission* New() const final {
    return CreateMaybeMessage<OilDelivery_Submission>(NULL);
  }

  OilDelivery_Submission* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OilDelivery_Submission>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OilDelivery_Submission& from);
  void MergeFrom(const OilDelivery_Submission& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OilDelivery_Submission* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string author = 1;
  void clear_author();
  static const int kAuthorFieldNumber = 1;
  const ::std::string& author() const;
  void set_author(const ::std::string& value);
  #if LANG_CXX11
  void set_author(::std::string&& value);
  #endif
  void set_author(const char* value);
  void set_author(const char* value, size_t size);
  ::std::string* mutable_author();
  ::std::string* release_author();
  void set_allocated_author(::std::string* author);

  // string algorithm = 2;
  void clear_algorithm();
  static const int kAlgorithmFieldNumber = 2;
  const ::std::string& algorithm() const;
  void set_algorithm(const ::std::string& value);
  #if LANG_CXX11
  void set_algorithm(::std::string&& value);
  #endif
  void set_algorithm(const char* value);
  void set_algorithm(const char* value, size_t size);
  ::std::string* mutable_algorithm();
  ::std::string* release_algorithm();
  void set_allocated_algorithm(::std::string* algorithm);

  // string thread = 3;
  void clear_thread();
  static const int kThreadFieldNumber = 3;
  const ::std::string& thread() const;
  void set_thread(const ::std::string& value);
  #if LANG_CXX11
  void set_thread(::std::string&& value);
  #endif
  void set_thread(const char* value);
  void set_thread(const char* value, size_t size);
  ::std::string* mutable_thread();
  ::std::string* release_thread();
  void set_allocated_thread(::std::string* thread);

  // string cpu = 4;
  void clear_cpu();
  static const int kCpuFieldNumber = 4;
  const ::std::string& cpu() const;
  void set_cpu(const ::std::string& value);
  #if LANG_CXX11
  void set_cpu(::std::string&& value);
  #endif
  void set_cpu(const char* value);
  void set_cpu(const char* value, size_t size);
  ::std::string* mutable_cpu();
  ::std::string* release_cpu();
  void set_allocated_cpu(::std::string* cpu);

  // string ram = 5;
  void clear_ram();
  static const int kRamFieldNumber = 5;
  const ::std::string& ram() const;
  void set_ram(const ::std::string& value);
  #if LANG_CXX11
  void set_ram(::std::string&& value);
  #endif
  void set_ram(const char* value);
  void set_ram(const char* value, size_t size);
  ::std::string* mutable_ram();
  ::std::string* release_ram();
  void set_allocated_ram(::std::string* ram);

  // string language = 6;
  void clear_language();
  static const int kLanguageFieldNumber = 6;
  const ::std::string& language() const;
  void set_language(const ::std::string& value);
  #if LANG_CXX11
  void set_language(::std::string&& value);
  #endif
  void set_language(const char* value);
  void set_language(const char* value, size_t size);
  ::std::string* mutable_language();
  ::std::string* release_language();
  void set_allocated_language(::std::string* language);

  // string compiler = 7;
  void clear_compiler();
  static const int kCompilerFieldNumber = 7;
  const ::std::string& compiler() const;
  void set_compiler(const ::std::string& value);
  #if LANG_CXX11
  void set_compiler(::std::string&& value);
  #endif
  void set_compiler(const char* value);
  void set_compiler(const char* value, size_t size);
  ::std::string* mutable_compiler();
  ::std::string* release_compiler();
  void set_allocated_compiler(::std::string* compiler);

  // string os = 8;
  void clear_os();
  static const int kOsFieldNumber = 8;
  const ::std::string& os() const;
  void set_os(const ::std::string& value);
  #if LANG_CXX11
  void set_os(::std::string&& value);
  #endif
  void set_os(const char* value);
  void set_os(const char* value, size_t size);
  ::std::string* mutable_os();
  ::std::string* release_os();
  void set_allocated_os(::std::string* os);

  // string problem = 21;
  void clear_problem();
  static const int kProblemFieldNumber = 21;
  const ::std::string& problem() const;
  void set_problem(const ::std::string& value);
  #if LANG_CXX11
  void set_problem(::std::string&& value);
  #endif
  void set_problem(const char* value);
  void set_problem(const char* value, size_t size);
  ::std::string* mutable_problem();
  ::std::string* release_problem();
  void set_allocated_problem(::std::string* problem);

  // string instance = 22;
  void clear_instance();
  static const int kInstanceFieldNumber = 22;
  const ::std::string& instance() const;
  void set_instance(const ::std::string& value);
  #if LANG_CXX11
  void set_instance(::std::string&& value);
  #endif
  void set_instance(const char* value);
  void set_instance(const char* value, size_t size);
  ::std::string* mutable_instance();
  ::std::string* release_instance();
  void set_allocated_instance(::std::string* instance);

  // string duration = 23;
  void clear_duration();
  static const int kDurationFieldNumber = 23;
  const ::std::string& duration() const;
  void set_duration(const ::std::string& value);
  #if LANG_CXX11
  void set_duration(::std::string&& value);
  #endif
  void set_duration(const char* value);
  void set_duration(const char* value, size_t size);
  ::std::string* mutable_duration();
  ::std::string* release_duration();
  void set_allocated_duration(::std::string* duration);

  // string email = 32;
  void clear_email();
  static const int kEmailFieldNumber = 32;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // string date = 33;
  void clear_date();
  static const int kDateFieldNumber = 33;
  const ::std::string& date() const;
  void set_date(const ::std::string& value);
  #if LANG_CXX11
  void set_date(::std::string&& value);
  #endif
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  ::std::string* mutable_date();
  ::std::string* release_date();
  void set_allocated_date(::std::string* date);

  // double obj = 31;
  void clear_obj();
  static const int kObjFieldNumber = 31;
  double obj() const;
  void set_obj(double value);

  // @@protoc_insertion_point(class_scope:pb.OilDelivery.Submission)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr author_;
  ::google::protobuf::internal::ArenaStringPtr algorithm_;
  ::google::protobuf::internal::ArenaStringPtr thread_;
  ::google::protobuf::internal::ArenaStringPtr cpu_;
  ::google::protobuf::internal::ArenaStringPtr ram_;
  ::google::protobuf::internal::ArenaStringPtr language_;
  ::google::protobuf::internal::ArenaStringPtr compiler_;
  ::google::protobuf::internal::ArenaStringPtr os_;
  ::google::protobuf::internal::ArenaStringPtr problem_;
  ::google::protobuf::internal::ArenaStringPtr instance_;
  ::google::protobuf::internal::ArenaStringPtr duration_;
  ::google::protobuf::internal::ArenaStringPtr email_;
  ::google::protobuf::internal::ArenaStringPtr date_;
  double obj_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_OilDelivery_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OilDelivery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pb.OilDelivery) */ {
 public:
  OilDelivery();
  virtual ~OilDelivery();

  OilDelivery(const OilDelivery& from);

  inline OilDelivery& operator=(const OilDelivery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OilDelivery(OilDelivery&& from) noexcept
    : OilDelivery() {
    *this = ::std::move(from);
  }

  inline OilDelivery& operator=(OilDelivery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OilDelivery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OilDelivery* internal_default_instance() {
    return reinterpret_cast<const OilDelivery*>(
               &_OilDelivery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(OilDelivery* other);
  friend void swap(OilDelivery& a, OilDelivery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OilDelivery* New() const final {
    return CreateMaybeMessage<OilDelivery>(NULL);
  }

  OilDelivery* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OilDelivery>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OilDelivery& from);
  void MergeFrom(const OilDelivery& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OilDelivery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OilDelivery_Input Input;
  typedef OilDelivery_Output Output;
  typedef OilDelivery_GasStation GasStation;
  typedef OilDelivery_Vehicle Vehicle;
  typedef OilDelivery_Cabin Cabin;
  typedef OilDelivery_VehicleDelivery VehicleDelivery;
  typedef OilDelivery_CabinDelivery CabinDelivery;
  typedef OilDelivery_Submission Submission;

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.OilDelivery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_OilDelivery_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OilDelivery_Input

// repeated .pb.OilDelivery.GasStation gasStations = 1;
inline int OilDelivery_Input::gasstations_size() const {
  return gasstations_.size();
}
inline void OilDelivery_Input::clear_gasstations() {
  gasstations_.Clear();
}
inline ::pb::OilDelivery_GasStation* OilDelivery_Input::mutable_gasstations(int index) {
  // @@protoc_insertion_point(field_mutable:pb.OilDelivery.Input.gasStations)
  return gasstations_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::OilDelivery_GasStation >*
OilDelivery_Input::mutable_gasstations() {
  // @@protoc_insertion_point(field_mutable_list:pb.OilDelivery.Input.gasStations)
  return &gasstations_;
}
inline const ::pb::OilDelivery_GasStation& OilDelivery_Input::gasstations(int index) const {
  // @@protoc_insertion_point(field_get:pb.OilDelivery.Input.gasStations)
  return gasstations_.Get(index);
}
inline ::pb::OilDelivery_GasStation* OilDelivery_Input::add_gasstations() {
  // @@protoc_insertion_point(field_add:pb.OilDelivery.Input.gasStations)
  return gasstations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::OilDelivery_GasStation >&
OilDelivery_Input::gasstations() const {
  // @@protoc_insertion_point(field_list:pb.OilDelivery.Input.gasStations)
  return gasstations_;
}

// repeated .pb.OilDelivery.Vehicle vehicles = 2;
inline int OilDelivery_Input::vehicles_size() const {
  return vehicles_.size();
}
inline void OilDelivery_Input::clear_vehicles() {
  vehicles_.Clear();
}
inline ::pb::OilDelivery_Vehicle* OilDelivery_Input::mutable_vehicles(int index) {
  // @@protoc_insertion_point(field_mutable:pb.OilDelivery.Input.vehicles)
  return vehicles_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::OilDelivery_Vehicle >*
OilDelivery_Input::mutable_vehicles() {
  // @@protoc_insertion_point(field_mutable_list:pb.OilDelivery.Input.vehicles)
  return &vehicles_;
}
inline const ::pb::OilDelivery_Vehicle& OilDelivery_Input::vehicles(int index) const {
  // @@protoc_insertion_point(field_get:pb.OilDelivery.Input.vehicles)
  return vehicles_.Get(index);
}
inline ::pb::OilDelivery_Vehicle* OilDelivery_Input::add_vehicles() {
  // @@protoc_insertion_point(field_add:pb.OilDelivery.Input.vehicles)
  return vehicles_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::OilDelivery_Vehicle >&
OilDelivery_Input::vehicles() const {
  // @@protoc_insertion_point(field_list:pb.OilDelivery.Input.vehicles)
  return vehicles_;
}

// -------------------------------------------------------------------

// OilDelivery_Output_Delivery

// repeated .pb.OilDelivery.VehicleDelivery vehicleDeliveries = 1;
inline int OilDelivery_Output_Delivery::vehicledeliveries_size() const {
  return vehicledeliveries_.size();
}
inline void OilDelivery_Output_Delivery::clear_vehicledeliveries() {
  vehicledeliveries_.Clear();
}
inline ::pb::OilDelivery_VehicleDelivery* OilDelivery_Output_Delivery::mutable_vehicledeliveries(int index) {
  // @@protoc_insertion_point(field_mutable:pb.OilDelivery.Output.Delivery.vehicleDeliveries)
  return vehicledeliveries_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::OilDelivery_VehicleDelivery >*
OilDelivery_Output_Delivery::mutable_vehicledeliveries() {
  // @@protoc_insertion_point(field_mutable_list:pb.OilDelivery.Output.Delivery.vehicleDeliveries)
  return &vehicledeliveries_;
}
inline const ::pb::OilDelivery_VehicleDelivery& OilDelivery_Output_Delivery::vehicledeliveries(int index) const {
  // @@protoc_insertion_point(field_get:pb.OilDelivery.Output.Delivery.vehicleDeliveries)
  return vehicledeliveries_.Get(index);
}
inline ::pb::OilDelivery_VehicleDelivery* OilDelivery_Output_Delivery::add_vehicledeliveries() {
  // @@protoc_insertion_point(field_add:pb.OilDelivery.Output.Delivery.vehicleDeliveries)
  return vehicledeliveries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::OilDelivery_VehicleDelivery >&
OilDelivery_Output_Delivery::vehicledeliveries() const {
  // @@protoc_insertion_point(field_list:pb.OilDelivery.Output.Delivery.vehicleDeliveries)
  return vehicledeliveries_;
}

// -------------------------------------------------------------------

// OilDelivery_Output

// repeated .pb.OilDelivery.Output.Delivery deliveries = 1;
inline int OilDelivery_Output::deliveries_size() const {
  return deliveries_.size();
}
inline void OilDelivery_Output::clear_deliveries() {
  deliveries_.Clear();
}
inline ::pb::OilDelivery_Output_Delivery* OilDelivery_Output::mutable_deliveries(int index) {
  // @@protoc_insertion_point(field_mutable:pb.OilDelivery.Output.deliveries)
  return deliveries_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::OilDelivery_Output_Delivery >*
OilDelivery_Output::mutable_deliveries() {
  // @@protoc_insertion_point(field_mutable_list:pb.OilDelivery.Output.deliveries)
  return &deliveries_;
}
inline const ::pb::OilDelivery_Output_Delivery& OilDelivery_Output::deliveries(int index) const {
  // @@protoc_insertion_point(field_get:pb.OilDelivery.Output.deliveries)
  return deliveries_.Get(index);
}
inline ::pb::OilDelivery_Output_Delivery* OilDelivery_Output::add_deliveries() {
  // @@protoc_insertion_point(field_add:pb.OilDelivery.Output.deliveries)
  return deliveries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::OilDelivery_Output_Delivery >&
OilDelivery_Output::deliveries() const {
  // @@protoc_insertion_point(field_list:pb.OilDelivery.Output.deliveries)
  return deliveries_;
}

// -------------------------------------------------------------------

// OilDelivery_GasStation_DemandValue

// int32 demand = 1;
inline void OilDelivery_GasStation_DemandValue::clear_demand() {
  demand_ = 0;
}
inline ::google::protobuf::int32 OilDelivery_GasStation_DemandValue::demand() const {
  // @@protoc_insertion_point(field_get:pb.OilDelivery.GasStation.DemandValue.demand)
  return demand_;
}
inline void OilDelivery_GasStation_DemandValue::set_demand(::google::protobuf::int32 value) {
  
  demand_ = value;
  // @@protoc_insertion_point(field_set:pb.OilDelivery.GasStation.DemandValue.demand)
}

// int32 value = 2;
inline void OilDelivery_GasStation_DemandValue::clear_value() {
  value_ = 0;
}
inline ::google::protobuf::int32 OilDelivery_GasStation_DemandValue::value() const {
  // @@protoc_insertion_point(field_get:pb.OilDelivery.GasStation.DemandValue.value)
  return value_;
}
inline void OilDelivery_GasStation_DemandValue::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:pb.OilDelivery.GasStation.DemandValue.value)
}

// -------------------------------------------------------------------

// OilDelivery_GasStation

// int32 id = 1;
inline void OilDelivery_GasStation::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 OilDelivery_GasStation::id() const {
  // @@protoc_insertion_point(field_get:pb.OilDelivery.GasStation.id)
  return id_;
}
inline void OilDelivery_GasStation::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.OilDelivery.GasStation.id)
}

// repeated .pb.OilDelivery.GasStation.DemandValue demandValues = 2;
inline int OilDelivery_GasStation::demandvalues_size() const {
  return demandvalues_.size();
}
inline void OilDelivery_GasStation::clear_demandvalues() {
  demandvalues_.Clear();
}
inline ::pb::OilDelivery_GasStation_DemandValue* OilDelivery_GasStation::mutable_demandvalues(int index) {
  // @@protoc_insertion_point(field_mutable:pb.OilDelivery.GasStation.demandValues)
  return demandvalues_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::OilDelivery_GasStation_DemandValue >*
OilDelivery_GasStation::mutable_demandvalues() {
  // @@protoc_insertion_point(field_mutable_list:pb.OilDelivery.GasStation.demandValues)
  return &demandvalues_;
}
inline const ::pb::OilDelivery_GasStation_DemandValue& OilDelivery_GasStation::demandvalues(int index) const {
  // @@protoc_insertion_point(field_get:pb.OilDelivery.GasStation.demandValues)
  return demandvalues_.Get(index);
}
inline ::pb::OilDelivery_GasStation_DemandValue* OilDelivery_GasStation::add_demandvalues() {
  // @@protoc_insertion_point(field_add:pb.OilDelivery.GasStation.demandValues)
  return demandvalues_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::OilDelivery_GasStation_DemandValue >&
OilDelivery_GasStation::demandvalues() const {
  // @@protoc_insertion_point(field_list:pb.OilDelivery.GasStation.demandValues)
  return demandvalues_;
}

// -------------------------------------------------------------------

// OilDelivery_Vehicle

// int32 id = 1;
inline void OilDelivery_Vehicle::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 OilDelivery_Vehicle::id() const {
  // @@protoc_insertion_point(field_get:pb.OilDelivery.Vehicle.id)
  return id_;
}
inline void OilDelivery_Vehicle::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.OilDelivery.Vehicle.id)
}

// repeated .pb.OilDelivery.Cabin cabins = 2;
inline int OilDelivery_Vehicle::cabins_size() const {
  return cabins_.size();
}
inline void OilDelivery_Vehicle::clear_cabins() {
  cabins_.Clear();
}
inline ::pb::OilDelivery_Cabin* OilDelivery_Vehicle::mutable_cabins(int index) {
  // @@protoc_insertion_point(field_mutable:pb.OilDelivery.Vehicle.cabins)
  return cabins_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::OilDelivery_Cabin >*
OilDelivery_Vehicle::mutable_cabins() {
  // @@protoc_insertion_point(field_mutable_list:pb.OilDelivery.Vehicle.cabins)
  return &cabins_;
}
inline const ::pb::OilDelivery_Cabin& OilDelivery_Vehicle::cabins(int index) const {
  // @@protoc_insertion_point(field_get:pb.OilDelivery.Vehicle.cabins)
  return cabins_.Get(index);
}
inline ::pb::OilDelivery_Cabin* OilDelivery_Vehicle::add_cabins() {
  // @@protoc_insertion_point(field_add:pb.OilDelivery.Vehicle.cabins)
  return cabins_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::OilDelivery_Cabin >&
OilDelivery_Vehicle::cabins() const {
  // @@protoc_insertion_point(field_list:pb.OilDelivery.Vehicle.cabins)
  return cabins_;
}

// -------------------------------------------------------------------

// OilDelivery_Cabin

// int32 id = 1;
inline void OilDelivery_Cabin::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 OilDelivery_Cabin::id() const {
  // @@protoc_insertion_point(field_get:pb.OilDelivery.Cabin.id)
  return id_;
}
inline void OilDelivery_Cabin::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.OilDelivery.Cabin.id)
}

// int32 volume = 2;
inline void OilDelivery_Cabin::clear_volume() {
  volume_ = 0;
}
inline ::google::protobuf::int32 OilDelivery_Cabin::volume() const {
  // @@protoc_insertion_point(field_get:pb.OilDelivery.Cabin.volume)
  return volume_;
}
inline void OilDelivery_Cabin::set_volume(::google::protobuf::int32 value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:pb.OilDelivery.Cabin.volume)
}

// -------------------------------------------------------------------

// OilDelivery_VehicleDelivery

// int32 id = 1;
inline void OilDelivery_VehicleDelivery::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 OilDelivery_VehicleDelivery::id() const {
  // @@protoc_insertion_point(field_get:pb.OilDelivery.VehicleDelivery.id)
  return id_;
}
inline void OilDelivery_VehicleDelivery::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.OilDelivery.VehicleDelivery.id)
}

// repeated .pb.OilDelivery.CabinDelivery cabinDeliveries = 2;
inline int OilDelivery_VehicleDelivery::cabindeliveries_size() const {
  return cabindeliveries_.size();
}
inline void OilDelivery_VehicleDelivery::clear_cabindeliveries() {
  cabindeliveries_.Clear();
}
inline ::pb::OilDelivery_CabinDelivery* OilDelivery_VehicleDelivery::mutable_cabindeliveries(int index) {
  // @@protoc_insertion_point(field_mutable:pb.OilDelivery.VehicleDelivery.cabinDeliveries)
  return cabindeliveries_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::pb::OilDelivery_CabinDelivery >*
OilDelivery_VehicleDelivery::mutable_cabindeliveries() {
  // @@protoc_insertion_point(field_mutable_list:pb.OilDelivery.VehicleDelivery.cabinDeliveries)
  return &cabindeliveries_;
}
inline const ::pb::OilDelivery_CabinDelivery& OilDelivery_VehicleDelivery::cabindeliveries(int index) const {
  // @@protoc_insertion_point(field_get:pb.OilDelivery.VehicleDelivery.cabinDeliveries)
  return cabindeliveries_.Get(index);
}
inline ::pb::OilDelivery_CabinDelivery* OilDelivery_VehicleDelivery::add_cabindeliveries() {
  // @@protoc_insertion_point(field_add:pb.OilDelivery.VehicleDelivery.cabinDeliveries)
  return cabindeliveries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::OilDelivery_CabinDelivery >&
OilDelivery_VehicleDelivery::cabindeliveries() const {
  // @@protoc_insertion_point(field_list:pb.OilDelivery.VehicleDelivery.cabinDeliveries)
  return cabindeliveries_;
}

// -------------------------------------------------------------------

// OilDelivery_CabinDelivery

// int32 id = 1;
inline void OilDelivery_CabinDelivery::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 OilDelivery_CabinDelivery::id() const {
  // @@protoc_insertion_point(field_get:pb.OilDelivery.CabinDelivery.id)
  return id_;
}
inline void OilDelivery_CabinDelivery::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.OilDelivery.CabinDelivery.id)
}

// int32 stationId = 2;
inline void OilDelivery_CabinDelivery::clear_stationid() {
  stationid_ = 0;
}
inline ::google::protobuf::int32 OilDelivery_CabinDelivery::stationid() const {
  // @@protoc_insertion_point(field_get:pb.OilDelivery.CabinDelivery.stationId)
  return stationid_;
}
inline void OilDelivery_CabinDelivery::set_stationid(::google::protobuf::int32 value) {
  
  stationid_ = value;
  // @@protoc_insertion_point(field_set:pb.OilDelivery.CabinDelivery.stationId)
}

// int32 quantity = 3;
inline void OilDelivery_CabinDelivery::clear_quantity() {
  quantity_ = 0;
}
inline ::google::protobuf::int32 OilDelivery_CabinDelivery::quantity() const {
  // @@protoc_insertion_point(field_get:pb.OilDelivery.CabinDelivery.quantity)
  return quantity_;
}
inline void OilDelivery_CabinDelivery::set_quantity(::google::protobuf::int32 value) {
  
  quantity_ = value;
  // @@protoc_insertion_point(field_set:pb.OilDelivery.CabinDelivery.quantity)
}

// -------------------------------------------------------------------

// OilDelivery_Submission

// string author = 1;
inline void OilDelivery_Submission::clear_author() {
  author_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OilDelivery_Submission::author() const {
  // @@protoc_insertion_point(field_get:pb.OilDelivery.Submission.author)
  return author_.GetNoArena();
}
inline void OilDelivery_Submission::set_author(const ::std::string& value) {
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.OilDelivery.Submission.author)
}
#if LANG_CXX11
inline void OilDelivery_Submission::set_author(::std::string&& value) {
  
  author_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.OilDelivery.Submission.author)
}
#endif
inline void OilDelivery_Submission::set_author(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.OilDelivery.Submission.author)
}
inline void OilDelivery_Submission::set_author(const char* value, size_t size) {
  
  author_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.OilDelivery.Submission.author)
}
inline ::std::string* OilDelivery_Submission::mutable_author() {
  
  // @@protoc_insertion_point(field_mutable:pb.OilDelivery.Submission.author)
  return author_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OilDelivery_Submission::release_author() {
  // @@protoc_insertion_point(field_release:pb.OilDelivery.Submission.author)
  
  return author_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OilDelivery_Submission::set_allocated_author(::std::string* author) {
  if (author != NULL) {
    
  } else {
    
  }
  author_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), author);
  // @@protoc_insertion_point(field_set_allocated:pb.OilDelivery.Submission.author)
}

// string algorithm = 2;
inline void OilDelivery_Submission::clear_algorithm() {
  algorithm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OilDelivery_Submission::algorithm() const {
  // @@protoc_insertion_point(field_get:pb.OilDelivery.Submission.algorithm)
  return algorithm_.GetNoArena();
}
inline void OilDelivery_Submission::set_algorithm(const ::std::string& value) {
  
  algorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.OilDelivery.Submission.algorithm)
}
#if LANG_CXX11
inline void OilDelivery_Submission::set_algorithm(::std::string&& value) {
  
  algorithm_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.OilDelivery.Submission.algorithm)
}
#endif
inline void OilDelivery_Submission::set_algorithm(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  algorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.OilDelivery.Submission.algorithm)
}
inline void OilDelivery_Submission::set_algorithm(const char* value, size_t size) {
  
  algorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.OilDelivery.Submission.algorithm)
}
inline ::std::string* OilDelivery_Submission::mutable_algorithm() {
  
  // @@protoc_insertion_point(field_mutable:pb.OilDelivery.Submission.algorithm)
  return algorithm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OilDelivery_Submission::release_algorithm() {
  // @@protoc_insertion_point(field_release:pb.OilDelivery.Submission.algorithm)
  
  return algorithm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OilDelivery_Submission::set_allocated_algorithm(::std::string* algorithm) {
  if (algorithm != NULL) {
    
  } else {
    
  }
  algorithm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), algorithm);
  // @@protoc_insertion_point(field_set_allocated:pb.OilDelivery.Submission.algorithm)
}

// string thread = 3;
inline void OilDelivery_Submission::clear_thread() {
  thread_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OilDelivery_Submission::thread() const {
  // @@protoc_insertion_point(field_get:pb.OilDelivery.Submission.thread)
  return thread_.GetNoArena();
}
inline void OilDelivery_Submission::set_thread(const ::std::string& value) {
  
  thread_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.OilDelivery.Submission.thread)
}
#if LANG_CXX11
inline void OilDelivery_Submission::set_thread(::std::string&& value) {
  
  thread_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.OilDelivery.Submission.thread)
}
#endif
inline void OilDelivery_Submission::set_thread(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  thread_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.OilDelivery.Submission.thread)
}
inline void OilDelivery_Submission::set_thread(const char* value, size_t size) {
  
  thread_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.OilDelivery.Submission.thread)
}
inline ::std::string* OilDelivery_Submission::mutable_thread() {
  
  // @@protoc_insertion_point(field_mutable:pb.OilDelivery.Submission.thread)
  return thread_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OilDelivery_Submission::release_thread() {
  // @@protoc_insertion_point(field_release:pb.OilDelivery.Submission.thread)
  
  return thread_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OilDelivery_Submission::set_allocated_thread(::std::string* thread) {
  if (thread != NULL) {
    
  } else {
    
  }
  thread_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thread);
  // @@protoc_insertion_point(field_set_allocated:pb.OilDelivery.Submission.thread)
}

// string cpu = 4;
inline void OilDelivery_Submission::clear_cpu() {
  cpu_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OilDelivery_Submission::cpu() const {
  // @@protoc_insertion_point(field_get:pb.OilDelivery.Submission.cpu)
  return cpu_.GetNoArena();
}
inline void OilDelivery_Submission::set_cpu(const ::std::string& value) {
  
  cpu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.OilDelivery.Submission.cpu)
}
#if LANG_CXX11
inline void OilDelivery_Submission::set_cpu(::std::string&& value) {
  
  cpu_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.OilDelivery.Submission.cpu)
}
#endif
inline void OilDelivery_Submission::set_cpu(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cpu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.OilDelivery.Submission.cpu)
}
inline void OilDelivery_Submission::set_cpu(const char* value, size_t size) {
  
  cpu_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.OilDelivery.Submission.cpu)
}
inline ::std::string* OilDelivery_Submission::mutable_cpu() {
  
  // @@protoc_insertion_point(field_mutable:pb.OilDelivery.Submission.cpu)
  return cpu_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OilDelivery_Submission::release_cpu() {
  // @@protoc_insertion_point(field_release:pb.OilDelivery.Submission.cpu)
  
  return cpu_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OilDelivery_Submission::set_allocated_cpu(::std::string* cpu) {
  if (cpu != NULL) {
    
  } else {
    
  }
  cpu_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cpu);
  // @@protoc_insertion_point(field_set_allocated:pb.OilDelivery.Submission.cpu)
}

// string ram = 5;
inline void OilDelivery_Submission::clear_ram() {
  ram_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OilDelivery_Submission::ram() const {
  // @@protoc_insertion_point(field_get:pb.OilDelivery.Submission.ram)
  return ram_.GetNoArena();
}
inline void OilDelivery_Submission::set_ram(const ::std::string& value) {
  
  ram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.OilDelivery.Submission.ram)
}
#if LANG_CXX11
inline void OilDelivery_Submission::set_ram(::std::string&& value) {
  
  ram_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.OilDelivery.Submission.ram)
}
#endif
inline void OilDelivery_Submission::set_ram(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.OilDelivery.Submission.ram)
}
inline void OilDelivery_Submission::set_ram(const char* value, size_t size) {
  
  ram_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.OilDelivery.Submission.ram)
}
inline ::std::string* OilDelivery_Submission::mutable_ram() {
  
  // @@protoc_insertion_point(field_mutable:pb.OilDelivery.Submission.ram)
  return ram_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OilDelivery_Submission::release_ram() {
  // @@protoc_insertion_point(field_release:pb.OilDelivery.Submission.ram)
  
  return ram_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OilDelivery_Submission::set_allocated_ram(::std::string* ram) {
  if (ram != NULL) {
    
  } else {
    
  }
  ram_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ram);
  // @@protoc_insertion_point(field_set_allocated:pb.OilDelivery.Submission.ram)
}

// string language = 6;
inline void OilDelivery_Submission::clear_language() {
  language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OilDelivery_Submission::language() const {
  // @@protoc_insertion_point(field_get:pb.OilDelivery.Submission.language)
  return language_.GetNoArena();
}
inline void OilDelivery_Submission::set_language(const ::std::string& value) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.OilDelivery.Submission.language)
}
#if LANG_CXX11
inline void OilDelivery_Submission::set_language(::std::string&& value) {
  
  language_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.OilDelivery.Submission.language)
}
#endif
inline void OilDelivery_Submission::set_language(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.OilDelivery.Submission.language)
}
inline void OilDelivery_Submission::set_language(const char* value, size_t size) {
  
  language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.OilDelivery.Submission.language)
}
inline ::std::string* OilDelivery_Submission::mutable_language() {
  
  // @@protoc_insertion_point(field_mutable:pb.OilDelivery.Submission.language)
  return language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OilDelivery_Submission::release_language() {
  // @@protoc_insertion_point(field_release:pb.OilDelivery.Submission.language)
  
  return language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OilDelivery_Submission::set_allocated_language(::std::string* language) {
  if (language != NULL) {
    
  } else {
    
  }
  language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), language);
  // @@protoc_insertion_point(field_set_allocated:pb.OilDelivery.Submission.language)
}

// string compiler = 7;
inline void OilDelivery_Submission::clear_compiler() {
  compiler_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OilDelivery_Submission::compiler() const {
  // @@protoc_insertion_point(field_get:pb.OilDelivery.Submission.compiler)
  return compiler_.GetNoArena();
}
inline void OilDelivery_Submission::set_compiler(const ::std::string& value) {
  
  compiler_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.OilDelivery.Submission.compiler)
}
#if LANG_CXX11
inline void OilDelivery_Submission::set_compiler(::std::string&& value) {
  
  compiler_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.OilDelivery.Submission.compiler)
}
#endif
inline void OilDelivery_Submission::set_compiler(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  compiler_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.OilDelivery.Submission.compiler)
}
inline void OilDelivery_Submission::set_compiler(const char* value, size_t size) {
  
  compiler_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.OilDelivery.Submission.compiler)
}
inline ::std::string* OilDelivery_Submission::mutable_compiler() {
  
  // @@protoc_insertion_point(field_mutable:pb.OilDelivery.Submission.compiler)
  return compiler_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OilDelivery_Submission::release_compiler() {
  // @@protoc_insertion_point(field_release:pb.OilDelivery.Submission.compiler)
  
  return compiler_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OilDelivery_Submission::set_allocated_compiler(::std::string* compiler) {
  if (compiler != NULL) {
    
  } else {
    
  }
  compiler_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), compiler);
  // @@protoc_insertion_point(field_set_allocated:pb.OilDelivery.Submission.compiler)
}

// string os = 8;
inline void OilDelivery_Submission::clear_os() {
  os_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OilDelivery_Submission::os() const {
  // @@protoc_insertion_point(field_get:pb.OilDelivery.Submission.os)
  return os_.GetNoArena();
}
inline void OilDelivery_Submission::set_os(const ::std::string& value) {
  
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.OilDelivery.Submission.os)
}
#if LANG_CXX11
inline void OilDelivery_Submission::set_os(::std::string&& value) {
  
  os_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.OilDelivery.Submission.os)
}
#endif
inline void OilDelivery_Submission::set_os(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.OilDelivery.Submission.os)
}
inline void OilDelivery_Submission::set_os(const char* value, size_t size) {
  
  os_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.OilDelivery.Submission.os)
}
inline ::std::string* OilDelivery_Submission::mutable_os() {
  
  // @@protoc_insertion_point(field_mutable:pb.OilDelivery.Submission.os)
  return os_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OilDelivery_Submission::release_os() {
  // @@protoc_insertion_point(field_release:pb.OilDelivery.Submission.os)
  
  return os_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OilDelivery_Submission::set_allocated_os(::std::string* os) {
  if (os != NULL) {
    
  } else {
    
  }
  os_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os);
  // @@protoc_insertion_point(field_set_allocated:pb.OilDelivery.Submission.os)
}

// string problem = 21;
inline void OilDelivery_Submission::clear_problem() {
  problem_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OilDelivery_Submission::problem() const {
  // @@protoc_insertion_point(field_get:pb.OilDelivery.Submission.problem)
  return problem_.GetNoArena();
}
inline void OilDelivery_Submission::set_problem(const ::std::string& value) {
  
  problem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.OilDelivery.Submission.problem)
}
#if LANG_CXX11
inline void OilDelivery_Submission::set_problem(::std::string&& value) {
  
  problem_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.OilDelivery.Submission.problem)
}
#endif
inline void OilDelivery_Submission::set_problem(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  problem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.OilDelivery.Submission.problem)
}
inline void OilDelivery_Submission::set_problem(const char* value, size_t size) {
  
  problem_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.OilDelivery.Submission.problem)
}
inline ::std::string* OilDelivery_Submission::mutable_problem() {
  
  // @@protoc_insertion_point(field_mutable:pb.OilDelivery.Submission.problem)
  return problem_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OilDelivery_Submission::release_problem() {
  // @@protoc_insertion_point(field_release:pb.OilDelivery.Submission.problem)
  
  return problem_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OilDelivery_Submission::set_allocated_problem(::std::string* problem) {
  if (problem != NULL) {
    
  } else {
    
  }
  problem_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), problem);
  // @@protoc_insertion_point(field_set_allocated:pb.OilDelivery.Submission.problem)
}

// string instance = 22;
inline void OilDelivery_Submission::clear_instance() {
  instance_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OilDelivery_Submission::instance() const {
  // @@protoc_insertion_point(field_get:pb.OilDelivery.Submission.instance)
  return instance_.GetNoArena();
}
inline void OilDelivery_Submission::set_instance(const ::std::string& value) {
  
  instance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.OilDelivery.Submission.instance)
}
#if LANG_CXX11
inline void OilDelivery_Submission::set_instance(::std::string&& value) {
  
  instance_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.OilDelivery.Submission.instance)
}
#endif
inline void OilDelivery_Submission::set_instance(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  instance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.OilDelivery.Submission.instance)
}
inline void OilDelivery_Submission::set_instance(const char* value, size_t size) {
  
  instance_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.OilDelivery.Submission.instance)
}
inline ::std::string* OilDelivery_Submission::mutable_instance() {
  
  // @@protoc_insertion_point(field_mutable:pb.OilDelivery.Submission.instance)
  return instance_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OilDelivery_Submission::release_instance() {
  // @@protoc_insertion_point(field_release:pb.OilDelivery.Submission.instance)
  
  return instance_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OilDelivery_Submission::set_allocated_instance(::std::string* instance) {
  if (instance != NULL) {
    
  } else {
    
  }
  instance_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), instance);
  // @@protoc_insertion_point(field_set_allocated:pb.OilDelivery.Submission.instance)
}

// string duration = 23;
inline void OilDelivery_Submission::clear_duration() {
  duration_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OilDelivery_Submission::duration() const {
  // @@protoc_insertion_point(field_get:pb.OilDelivery.Submission.duration)
  return duration_.GetNoArena();
}
inline void OilDelivery_Submission::set_duration(const ::std::string& value) {
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.OilDelivery.Submission.duration)
}
#if LANG_CXX11
inline void OilDelivery_Submission::set_duration(::std::string&& value) {
  
  duration_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.OilDelivery.Submission.duration)
}
#endif
inline void OilDelivery_Submission::set_duration(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.OilDelivery.Submission.duration)
}
inline void OilDelivery_Submission::set_duration(const char* value, size_t size) {
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.OilDelivery.Submission.duration)
}
inline ::std::string* OilDelivery_Submission::mutable_duration() {
  
  // @@protoc_insertion_point(field_mutable:pb.OilDelivery.Submission.duration)
  return duration_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OilDelivery_Submission::release_duration() {
  // @@protoc_insertion_point(field_release:pb.OilDelivery.Submission.duration)
  
  return duration_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OilDelivery_Submission::set_allocated_duration(::std::string* duration) {
  if (duration != NULL) {
    
  } else {
    
  }
  duration_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), duration);
  // @@protoc_insertion_point(field_set_allocated:pb.OilDelivery.Submission.duration)
}

// double obj = 31;
inline void OilDelivery_Submission::clear_obj() {
  obj_ = 0;
}
inline double OilDelivery_Submission::obj() const {
  // @@protoc_insertion_point(field_get:pb.OilDelivery.Submission.obj)
  return obj_;
}
inline void OilDelivery_Submission::set_obj(double value) {
  
  obj_ = value;
  // @@protoc_insertion_point(field_set:pb.OilDelivery.Submission.obj)
}

// string email = 32;
inline void OilDelivery_Submission::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OilDelivery_Submission::email() const {
  // @@protoc_insertion_point(field_get:pb.OilDelivery.Submission.email)
  return email_.GetNoArena();
}
inline void OilDelivery_Submission::set_email(const ::std::string& value) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.OilDelivery.Submission.email)
}
#if LANG_CXX11
inline void OilDelivery_Submission::set_email(::std::string&& value) {
  
  email_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.OilDelivery.Submission.email)
}
#endif
inline void OilDelivery_Submission::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.OilDelivery.Submission.email)
}
inline void OilDelivery_Submission::set_email(const char* value, size_t size) {
  
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.OilDelivery.Submission.email)
}
inline ::std::string* OilDelivery_Submission::mutable_email() {
  
  // @@protoc_insertion_point(field_mutable:pb.OilDelivery.Submission.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OilDelivery_Submission::release_email() {
  // @@protoc_insertion_point(field_release:pb.OilDelivery.Submission.email)
  
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OilDelivery_Submission::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    
  } else {
    
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:pb.OilDelivery.Submission.email)
}

// string date = 33;
inline void OilDelivery_Submission::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OilDelivery_Submission::date() const {
  // @@protoc_insertion_point(field_get:pb.OilDelivery.Submission.date)
  return date_.GetNoArena();
}
inline void OilDelivery_Submission::set_date(const ::std::string& value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pb.OilDelivery.Submission.date)
}
#if LANG_CXX11
inline void OilDelivery_Submission::set_date(::std::string&& value) {
  
  date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.OilDelivery.Submission.date)
}
#endif
inline void OilDelivery_Submission::set_date(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.OilDelivery.Submission.date)
}
inline void OilDelivery_Submission::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.OilDelivery.Submission.date)
}
inline ::std::string* OilDelivery_Submission::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:pb.OilDelivery.Submission.date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OilDelivery_Submission::release_date() {
  // @@protoc_insertion_point(field_release:pb.OilDelivery.Submission.date)
  
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OilDelivery_Submission::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:pb.OilDelivery.Submission.date)
}

// -------------------------------------------------------------------

// OilDelivery

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_OilDelivery_2eproto
